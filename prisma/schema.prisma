// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  id         String       @id @default(cuid())
  name       String?
  avatar     String?
  tradeUrl   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  profiles   Profile[]
  tokens     Token[]
  connection Connection[]
  inventory  Inventory[]
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String  @unique
  name         String?
  avatar       String?
  email        String? @unique
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Skin {
  id            String       @id @default(cuid())
  appId         Int
  assetId       String
  steamId       String       @unique
  steamImg      String
  steamName     String
  name          String?
  fullName      String?
  img           String?
  preview       String?
  hasScreenshot Boolean      @default(false)
  screenshot    String?
  inspect       String?
  float         Int?
  floatMin      Int?
  floatMax      Int?
  pattern       Int?
  quality       String?
  rarity        String?
  rarityColor   String?
  botPrice      Int?
  defaultPrice  Int?
  lowestPrice   Int?
  price         Int?
  rubPrice      Int?
  overstockDiff Int?
  hasHighDemand Boolean?
  isUnsellable  Boolean?
  isStatTrak    Boolean?
  model3d       String?
  collection    Collection[]
  case          Case[]
  stickers      Sticker[]
  isBlacklisted Boolean      @default(false)
  inventory     Inventory?   @relation(fields: [inventoryId], references: [id])
  inventoryId   String?
}

model Inventory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  skins     Skin[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Case {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  img       String
  name      String
  skin      Skin?    @relation(fields: [skinId], references: [id])
  skinId    String?
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  img       String
  name      String
  skin      Skin?    @relation(fields: [skinId], references: [id])
  skinId    String?
}

model Sticker {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  img       String
  name      String
  skin      Skin?    @relation(fields: [skinId], references: [id])
  skinId    String?
}

model SteamBot {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  accountName    String
  password       String
  proxy          String?
  sharedSecret   String
  identitySecret String
  avatar         String?
  name           String
  profileUrl     String
  tradeUrl       String?
  cookies        String[]
}
