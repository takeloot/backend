// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Connection {
  id         String   @id @default(cuid())
  instanceId String?
  ipHash     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  id         String       @id @default(cuid())
  name       String?
  avatar     String?
  tradeURL   String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  profiles   Profile[]
  tokens     Token[]
  connection Connection[]
  inventory  Inventory[]
}

model Profile {
  id           String  @id @default(cuid())
  provider     String
  serviceId    String  @unique
  name         String?
  avatar       String?
  email        String? @unique
  accessToken  String?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String
}

model Skin {
  id          String     @id @default(cuid())
  appId       Int
  assetId     String
  name        String?
  inspect     String?
  float       String?
  steamId     String     @unique
  steamImg    String
  steamName   String
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?
}

model Inventory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  skins     Skin[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}
